{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","helpers/defalultImg.ts","helpers/normalizeMovie.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","memo","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","API_URL","getMovie","query","fetch","then","res","json","catch","Response","Error","normalizeMovie","movieFromServer","Title","Plot","Poster","imdbID","FindMovie","onAddMovie","useState","setQuery","previewMovie","setPreviewMovie","isLoading","setIsLoading","onloadError","setOnloadError","handleSearchChange","useCallback","event","target","value","onSubmit","e","preventDefault","fetchData","a","trim","data","preparedMovieData","htmlFor","type","id","placeholder","cn","onChange","disabled","onClick","App","setMovies","find","checkMovie","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"+TAQaA,EAA6BC,gBAAK,gBAAGC,EAAH,EAAGA,MAAH,OAC7C,sBAAKC,UAAU,OAAO,UAAQ,YAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACE,UAAQ,cACRC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAa,UAAQ,aAAlC,SAAgDD,EAAMK,aAI1D,sBAAKJ,UAAU,UAAU,UAAQ,mBAAjC,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAS,UAAQ,WAAhC,8BC3BKC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,c,uCCVbC,G,MAAO,0CADG,aAGT,SAASC,EAASC,GACvB,OAAOC,MAAM,GAAD,OAAIH,EAAJ,cAAiBE,IAC1BE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,iBAAO,CACZC,SAAU,QACVC,MAAO,uBCVN,ICGMC,EAAiB,SAC5BC,GAEA,IACEC,EAIED,EAJFC,MACAC,EAGEF,EAHFE,KACAC,EAEEH,EAFFG,OACAC,EACEJ,EADFI,OAWF,MAAO,CACLvB,MAAOoB,EACPnB,YAN2B,QAAToB,EAChB,iBACAA,EAKFvB,OAXwB,QAAXwB,EDbY,4DCevBA,EAUFf,OAAQgB,EACRpB,QAAQ,8BAAD,OAAgCoB,KCV9BC,EAA6B,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAC3C,EAA0BC,mBAAS,IAAnC,mBAAOhB,EAAP,KAAciB,EAAd,KACA,EAAwCD,qBAAxC,mBAAOE,EAAP,KAAqBC,EAArB,KACA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAsCL,oBAAS,GAA/C,mBAAOM,EAAP,KAAoBC,EAApB,KAEMC,EAAqBC,uBAAY,SACrCC,GAEAH,GAAe,GACfN,EAASS,EAAMC,OAAOC,SACrB,IAkCH,OACE,qCACE,uBACE1C,UAAU,aACV2C,SApCmB,SAACC,GACxBA,EAAEC,iBACFV,GAAa,GAEb,IAAMW,EAAS,uCAAG,8BAAAC,EAAA,+EAEKlC,EAASC,EAAMkC,QAFpB,OAIV,UAFEC,EAFQ,QAKZZ,GAAe,IAETa,EAAoB5B,EAAe2B,GAEzChB,EAAgBiB,IATJ,gDAYdb,GAAe,GAZD,yBAcdF,GAAa,GAdC,4EAAH,qDAkBfW,KAYE,UAIE,sBAAK9C,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQmD,QAAQ,cAAjC,yBAIA,qBAAKnD,UAAU,UAAf,SACE,uBACE,UAAQ,aACRoD,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZZ,MAAO5B,EACPd,UAAWuD,IAAG,QAAS,CACrB,YAAanB,IAEfoB,SAAUlB,MAIbF,GACC,mBAAGpC,UAAU,iBAAiB,UAAQ,eAAtC,qDAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACE,UAAQ,eACRoD,KAAK,SACLpD,UAAWuD,IAAG,kBAAmB,CAC/B,aAAcrB,IAEhBuB,UAAW3C,EAAMkC,OANnB,SAQGhB,EACG,eACA,mBAIPA,GACC,qBAAKhC,UAAU,UAAf,SACE,wBACE,UAAQ,YACRoD,KAAK,SACLpD,UAAU,oBACV0D,QA7DS,WACrB7B,EAAWG,GAEXD,EAAS,IACTE,EAAgB,OAqDN,qCAaPD,GACC,sBAAKhC,UAAU,YAAY,UAAQ,mBAAnC,UACE,oBAAIA,UAAU,QAAd,qBACA,cAAC,EAAD,CAAWD,MAAOiC,WC1Hf2B,EAAM,WACjB,MAA4B7B,mBAAkB,IAA9C,mBAAOrB,EAAP,KAAemD,EAAf,KAiBA,OACE,sBAAK5D,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQA,MAGtB,qBAAKT,UAAU,UAAf,SACE,cAAC,EAAD,CAAW6B,WAtBA,SAAC9B,KACYU,EAAOoD,MAAK,SAAAC,GAAU,OAChDA,EAAWnD,SAAWZ,EAAMY,WAO9BiD,GAAU,SAAAG,GAAa,4BAClBA,GADkB,CAErBhE,gBChBNiE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d387d74a.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = memo(({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n));\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_KEY = 'b2d94bd5';\nconst API_URL = `https://www.omdbapi.com/?apikey=${API_KEY}`;\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","/* eslint-disable max-len */\nexport const defaultImgURL = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n","import { Movie } from '../types/Movie';\nimport { MovieData } from '../types/MovieData';\nimport { defaultImgURL } from './defalultImg';\n\nexport const normalizeMovie = (\n  movieFromServer: MovieData,\n): Movie => {\n  const {\n    Title,\n    Plot,\n    Poster,\n    imdbID,\n  } = movieFromServer;\n\n  const imgUrl = Poster === 'N/A'\n    ? defaultImgURL\n    : Poster;\n\n  const description = Plot === 'N/A'\n    ? 'No description'\n    : Plot;\n\n  return {\n    title: Title,\n    description,\n    imgUrl,\n    imdbId: imdbID,\n    imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n  };\n};\n","import cn from 'classnames';\nimport React, {\n  ChangeEvent,\n  FormEvent,\n  useCallback,\n  useState,\n} from 'react';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { normalizeMovie } from '../../helpers/normalizeMovie';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  onAddMovie: (movie: Movie) => void;\n}\n\nexport const FindMovie: React.FC<Props> = ({ onAddMovie }) => {\n  const [query, setQuery] = useState('');\n  const [previewMovie, setPreviewMovie] = useState<Movie | null>();\n  const [isLoading, setIsLoading] = useState(false);\n  const [onloadError, setOnloadError] = useState(false);\n\n  const handleSearchChange = useCallback((\n    event: ChangeEvent<HTMLInputElement>,\n  ) => {\n    setOnloadError(false);\n    setQuery(event.target.value);\n  }, []);\n\n  const handleFormSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    const fetchData = async () => {\n      try {\n        const data = await getMovie(query.trim());\n\n        if ('Error' in data) {\n          setOnloadError(true);\n        } else {\n          const preparedMovieData = normalizeMovie(data);\n\n          setPreviewMovie(preparedMovieData);\n        }\n      } catch (error) {\n        setOnloadError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  };\n\n  const handleAddMovie = () => {\n    onAddMovie(previewMovie as Movie);\n\n    setQuery('');\n    setPreviewMovie(null);\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              value={query}\n              className={cn('input', {\n                'is-danger': onloadError,\n              })}\n              onChange={handleSearchChange}\n            />\n          </div>\n\n          {onloadError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn('button is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={!query.trim()}\n            >\n              {previewMovie\n                ? 'Search again'\n                : 'Find a movie'}\n            </button>\n          </div>\n\n          {previewMovie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {previewMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={previewMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = (movie: Movie) => {\n    const isPresentInMovies = !!movies.find(checkMovie => (\n      checkMovie.imdbId === movie.imdbId\n    ));\n\n    if (isPresentInMovies) {\n      return;\n    }\n\n    setMovies(currentMovies => ([\n      ...currentMovies,\n      movie,\n    ]));\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onAddMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}